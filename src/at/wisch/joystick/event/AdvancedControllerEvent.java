/**
 *   ForceFeedback Joystick Driver for Java
 *   http://sourceforge.net/projects/ffjoystick4java/
 *
 *   -----------------------------------------------------------------------------
 * 
 *   Copyright (c) 2010, Martin Wischenbart
 *   All rights reserved.
 *   
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions are met:
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the name of the ForceFeedback Joystick Driver for Java nor the
 *      names of its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *      
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 *   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 *   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 *   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 *   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 *   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 *   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *   POSSIBILITY OF SUCH DAMAGE.
 *   
 *   -----------------------------------------------------------------------------
 *   
 *   If you have any suggestions, or if you want to report a bug, please
 *   see http://sourceforge.net/projects/ffjoystick4java/ or contact me
 *   via email.
 *   
 *   Martin Wischenbart
 *   elboato@users.sourceforge.net
 *   
 */


package at.wisch.joystick.event;

import org.lwjgl.input.Controller;


/**
 * The Class AdvancedControllerEvent. It extends ControllerEvent to support more advanced controllers. If event listening is enabled, AdvancedControllerEvents occur whenever an input value of a controller changes.
 * 
 * @see ControllerEventManager
 * @see ControllerEventListener 
 * 
 * @author Martin Wischenbart
 */
public abstract class AdvancedControllerEvent extends org.lwjgl.input.ControllerEvent {

	/**
	 * Indicates the event was caused by a POV (X or Y axis): the object is a
	 * ControllerPovEvent (casting is safe).
	 */
	public static final int POV = 5;
	
	/**
	 * Indicates the event was caused by a trackball: the object is a
	 * ControllerBallEvent (casting is safe).
	 */
	public static final int BALL = 6;
	
	
	/** Type of control that generated the event */
	/* has to be declared again, so it can be accessed from within this class, without changing the superclass.
	 * does it work this way?*/
	private int type;
	
	
	
	/* The index of the input (axis, POV, ball or button) that generated the event 
	 * (no new declaration, just different javadoc) */
	//private int index;
	
	
	
	/**
	 * Create a new advanced event.
	 * 
	 * @param source
	 *            the Controller that generated the event
	 * @param timeStamp
	 *            the timestamp given for this event
	 * @param type
	 *            the type of control generating this event (AXIS, BUTTON, POV, POVX, POVY or BALL)
	 * @param index
	 *            the index of the input that generated the event (e.g. axis index, button index, ...)
	 * @param xaxis
	 *            true if this event was caused by the X-axis. false, otherwise.
	 * @param yaxis
	 *            True if this event was caused by the Y-axis. false, otherwise.
	 */
	protected AdvancedControllerEvent(Controller source, long timeStamp, int type,
			int index, boolean xaxis, boolean yaxis) {
		super(source, timeStamp, type, index, xaxis, yaxis);
	}

	
	
	/**
	 * Check if this event was generated by a POV.
	 * 
	 * @return true, if this event was generated by a POV (any axis). false,
	 *         otherwise.
	 */
	public boolean isPov() {
		return type == POV;
	}
	
	
	
	/**
	 * Check if this event was generated by a POV axis. This implementation does
	 * not allow distinguishing between X and Y axis.
	 * 
	 * @return true, if this event was generated by a POV (any axis). false,
	 *         otherwise.
	 */
	@Override
	public boolean isPovX() {
		return isPov();
	}
	
	
	/**
	 * Check if this event was generated by a POV axis. This implementation does
	 * not allow distinguishing between X and Y axis.
	 * 
	 * @return true, if this event was generated by a POV (any axis). false,
	 *         otherwise.
	 */
	@Override
	public boolean isPovY() {
		return isPov();
	}
	
	

	
	/**
	 * Check if this event was generated by a trackball.
	 * 
	 * @return True if this event was generated by a trackball
	 */
	public boolean isBall() {
		return type == BALL;
	}
	
	
	/**
	 * Check if this event was caused by the X axis.
	 * 
	 * @return true, if this event was caused by the X axis. false, otherwise.
	 */
	@Override
	public boolean isXAxis() {
		return super.isAxis() && index == 0;
	}

	/**
	 * Check if this event was caused by the Y axis.
	 * 
	 * @return true, if this event was caused by the Y axis. false, otherwise.
	 */
	@Override
	public boolean isYAxis() {
		return super.isAxis() && index == 1;
	}
	
	
	
	/**
	 * Returns a String describing the ControllerEvent. 
	 * 
	 * @return a String describing the ControllerEvent
	 */
	public abstract String toString();
	
	
}